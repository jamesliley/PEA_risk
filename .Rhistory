for (i in 1:10) { #dim(emoj)[1]) {
cat(paste0('\\def\\',tocam(emoj[i,4]),
"{{\\fontspec{Symbola}\\symbol{\"",
gsub("U+","",emoj[i,2],fixed=TRUE),"} % ",emoj[i,5]))
cat("\r")
}
#sink()
emoj=read.csv("~/Desktop/emojilist.txt",header=FALSE)
firstup = function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
tocam=function(s) {
s1=unlist(strsplit(s," "))
if (length(s1)>1) {
s1[2:length(s1)]=firstup(s1[2:length(s1)])
}
return(paste(s1,collapse=""))
}
sink("~/Desktop/e2.txt")
for (i in 1:10) { #dim(emoj)[1]) {
cat(paste0('\\def\\',tocam(emoj[i,4]),
"{{\\fontspec{Symbola}\\symbol{\"",
gsub("U+","",emoj[i,2],fixed=TRUE),"} % ",emoj[i,5]))
cat("\r")
}
sink()
emoj[1:20,3]
emoj[1:20,2]
emoj[1:20,1]
source("~/.active-rstudio-document")
tocam=function(s) {
s1=unlist(strsplit(s," |-|;"))
if (length(s1)>1) {
s1[2:length(s1)]=firstup(s1[2:length(s1)])
}
return(paste(s1,collapse=""))
}
tocam=function(s) {
s1=unlist(strsplit(s,"[^a-z]"))
if (length(s1)>1) {
s1[2:length(s1)]=firstup(s1[2:length(s1)])
}
return(paste(s1,collapse=""))
}
tocam("sdfh&erw asdfw;fweAdsfw")
source("~/.active-rstudio-document")
emoj[566,]
source("~/.active-rstudio-document")
emoj[1500]
emoj[1500,]
emoj[1800,]
source("~/.active-rstudio-document")
install.packages("forestplot")
forestplot
help(forestplot)
library(forestplot)
help(forestplot)
orx=c(1.1,1.3,1.4)
ci1=c(0.9,1.1,1.0);
ci2=c(1.8,2.0,1.7)
orx=c(1.1,1.3,1.4)
ci1=c(0.9,1.1,1.0);
ci2=c(1.8,2.0,1.7)
var=c("asdf","DSfsd","sdfs")
orx=c(1.1,1.3,1.4)
ci1=c(0.9,1.1,1.0);
ci2=c(1.8,2.0,1.7)
var=c("asdf","DSfsd","sdfs")
forestplot(var,orx,ci1,ci2)
help(forestplot)
source("~/.active-rstudio-document")
fxx
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
factorial(0)
factorial(3)
factorial(5)
r=1
(1/factorial(r-1))
sq=0:r
x=0.5
u=0; l=1
sq=0:r
x0=x- u*r
xout=rep(NA,length(x0))
u=1; l=0
sq=0:r
x0=x- l*r
xout=rep(NA,length(x0))
x0
(1/factorial(r-1))
sq
(-1)^sq
choose(r,sq)
pmax((x0[i]-sq),0)^(n-1)
source("~/.active-rstudio-document")
pmax((x0[i]-sq),0)^(r-1)
sum(((-1)^sq)*choose(r,sq)*pmax((x0[i]-sq),0)^(r-1))
((-1)^sq)*choose(r,sq)*pmax((x0[i]-sq),0)^(r-1)
pmax((x0[i]-sq),0)
x0
i
i=1
pmax((x0[i]-sq),0)
pmax((x0[i]-sq),0)^(r-1)
r=3
sq=0:r
x0=x- l*r
xout=rep(NA,length(x0))
((-1)^sq)*choose(r,sq)*pmax((x0[i]-sq),0)^(r-1)
(1/factorial(r-1))*sum(((-1)^sq)*choose(r,sq)*pmax((x0[i]-sq),0)^(r-1))
xx=seq(min(sm),max(sm),length=500)
x=xx
sq=0:r
x0=x- l*r
xout=rep(NA,length(x0))
for (i in 1:length(x0)) {
xout[i]= (1/factorial(r-1))*sum(((-1)^sq)*choose(r,sq)*pmax((x0[i]-sq),0)^(r-1))
}
plot(xout)
source("~/.active-rstudio-document")
fihx=function(x,r,l=0,u=1) {
sq=0:r
x0=x- l*r
xout=rep(NA,length(x0))
for (i in 1:length(x0)) {
xout[i]= (1/factorial(r-1))*sum(((-1)^sq)*choose(r,sq)*pmax((x0[i]-sq),0)^(r-1))
}
fih1= xout/((l-u))
return(fih1)
}
d=1; n=10000
sm=rowSums(matrix(runif(d*n),n,d))
xx=seq(min(sm),max(sm),length=500)
plot(density(sm))
fxx=fih(xx,d,0,1)
lines(xx,fxx)
source("~/.active-rstudio-document")
fihx(0.5,3)
fihx=function(x,r,l=0,u=1) {
sq=0:r
x0=x- l*r
xout=rep(NA,length(x0))
for (i in 1:length(x0)) {
xout[i]= (1/factorial(r-1))*sum(((-1)^sq)*choose(r,sq)*pmax((x0[i]-sq),0)^(r-1))
}
fih1= xout/((u-l))
return(fih1)
}
d=3; n=10000
sm=rowSums(matrix(runif(d*n),n,d))
xx=seq(min(sm),max(sm),length=500)
plot(density(sm))
fxx=fih(xx,d,0,1)
lines(xx,fxx)
fihx(0.5,3)
fihx(c(0,0.5,1),3)
min(xx)
max(xx)
plot(xx,fxx)
which.min(abs(xx-0.5))
xx[67]
fxx[67]
fihx(0.5,3,0,1)
fihx(xx,3,0.1)[67]
fihx(xx[67],3,0,1)
fihx=function(x,r,l=0,u=1) {
sq=0:r
x0=x- l*r
xout=rep(NA,length(x0))
for (i in 1:length(x0)) {
xout[i]= (1/factorial(r-1))*sum(((-1)^sq)*choose(r,sq)*pmax((x0[i]-sq),0)^(r-1))
}
fih1= xout/((u-l))
return(fih1)
}
fihx(xx[67],3,0,1)
fihx(xx,3,0.1)[67]
r=3; u=1; l=0; x=xx
sq=0:r
x0=x- l*r
xout=rep(NA,length(x0))
xout[67]
xx[67]
l*r
for (i in 1:length(x0)) {
xout[i]= (1/factorial(r-1))*sum(((-1)^sq)*choose(r,sq)*pmax((x0[i]-sq),0)^(r-1))
}
xout[67]
u-l
fih1= xout/((u-l))
fih1[67]
fihx=function(x,r,l=0,u=1) {
sq=0:r
x0=x- l*r
xout=rep(NA,length(x0))
for (i in 1:length(x0)) {
xout[i]= (1/factorial(r-1))*sum(((-1)^sq)*choose(r,sq)*pmax((x0[i]-sq),0)^(r-1))
}
fih1= xout/((u-l))
return(fih1)
}
fihx(xx,3,0.1)[67]
fihx(xx[67],3,0.1)
xx[67]
source("~/.active-rstudio-document")
sq=0:r
x0=x- l*r
xout=rep(NA,length(x0))
for (i in 1:length(x0)) {
xout[i]= (1/factorial(r-1))*sum(((-1)^sq)*choose(r,sq)*pmax((x0[i]-sq),0)^(r-1))
}
fih1= xout/((u-l))
fih1[67]
fihx(x[67],3,0.1)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
pbinom(3,10,1/2)
source("~/.active-rstudio-document")
ff=function(x) x^2
xint(ff,0,1)
xint(ff,0,1,res=1000)
source("~/.active-rstudio-document")
xint(ff,0,1,res=1000)
source("~/.active-rstudio-document")
xint(ff,0,1,res=1000)
source("~/.active-rstudio-document")
fn(3)
source("~/.active-rstudio-document")
fn(3)
source("~/.active-rstudio-document")
fn(3)
n=3
xsub=rep(0,n)
for (r in 1:n) {
pr=pbinom(r,n,1/2)
fr=xint(function(z) {
xint(function(x) {
fihx(x,n-r,0,1/2)*fihx(z-x,r,1/2,1)
},0,z)
},r-0.5,r+0.5)
xsub[r]=pr*fr
}
xsub
warnings()
n1=5; n2=3; x=2.5
integrate(function(z) fihx(z,n1,0,1/2)*fihx(x-z,n2,1/2,1),0,x)
names(integrate(function(z) fihx(z,n1,0,1/2)*fihx(x-z,n2,1/2,1),0,x))
integrate(function(z) fihx(z,n1,0,1/2)*fihx(x-z,n2,1/2,1),0,x)$value
help(integrate)
n=8
r=3
xsub=rep(0,n)
pr=pbinom(r,n,1/2)
pr
fr=xint(function(x) fconv(x,n-r,r),r-0.5,r+0.5)
fconv=function(x,n1,n2) {
integrate(function(z) fihx(z,n1,0,1/2)*fihx(x-z,n2,1/2,1),0,x)$value
}
fr=xint(function(x) fconv(x,n-r,r),r-0.5,r+0.5)
pr=pbinom(r,n,1/2)
f1=Vectorize(function(x) fconv(x,n-r,r))
fr=integrate(f1,n-r,r)
fr
pr=pbinom(r,n,1/2)
f1=Vectorize(function(x) fconv(x,n-r,r))
fr=integrate(f1,r-1/2,r+1/2)$value
fr
fihx=function(x,r,l=0,u=1) {
sq=0:r
x0=(x-r*l)/(u-l)
xout=rep(NA,length(x0))
for (i in 1:length(x0)) {
xout[i]= (1/factorial(r-1))*sum(((-1)^sq)*choose(r,sq)*pmax((x0[i]-sq),0)^(r-1))
}
fih1= xout/((u-l))
return(fih1)
}
# basic trapezoidal integration
xint=function(f,lower,upper,res=200) {
sx=seq(lower,upper,length=res)
ss=0
for (i in 1:res) ss=ss+f(sx[i])
return(ss*(upper-lower)/res)
}
#d=7; n=10000
#u=1; l=5
#sm=rowSums(matrix(runif(d*n,u,l),n,d))
#xx=seq(min(sm),max(sm),length=500)
#plot(density(sm))
#fxx=fihx(xx,d,u,l)
#lines(xx,fxx)
#P( floor(sum(u))= sum(floor(u))= sum(P(..|n2=r)P(n2=r))
#P(n2=r)=pbinom(n2,n,1/2)
#P(floor(sum(u))=sum(floor(u))|n2=r) = P(floor(sum(u))=r|n2=r) = P(r-1/2 < sum(u) < r+1/2|n2=r)
# int_(r-1/2)^(r+1/2) int_0^z fhx(x,n-r,0,1/2)fhx(z-x,r,1/2,1) dx dz
fconv=function(x,n1,n2) {
integrate(function(z) fihx(z,n1,0,1/2)*fihx(x-z,n2,1/2,1),0,x)$value
}
fn=function(n) {
xsub=rep(0,n)
for (r in 1:n) {
pr=pbinom(r,n,1/2)
f1=Vectorize(function(x) fconv(x,n-r,r))
fr=integrate(f1,r-1/2,r+1/2)$value
xsub[r]=pr*fr
}
return(sum(xsub))
}
fn(8)
source("~/.active-rstudio-document")
xs=fn(8)
xs
n=8
xsub=rep(0,n)
for (r in 1:n) {
pr=pbinom(r,n,1/2)
f1=Vectorize(function(x) fconv(x,n-r,r))
fr=integrate(f1,r-1/2,r+1/2)$value
xsub[r]=pr*fr
}
xsub
r
xx=seq(0,5,length=1000)
plot(xx,xx+(1/(1+xx)),type="l")
plot(xx,xx-(1/(1+xx)),type="l")
help(rnbinom)
rnbinom(10,1,0.5)
2^rnbinom(10,1,0.5) - 1
mean(2^rnbinom(1000,1,0.5) - 1)
mean(2^rnbinom(1000,1,0.5) - 1)
mean(2^rnbinom(1000,1,0.5) - 1)
mean(2^rnbinom(1000,1,0.5) - 1)
mean(2^rnbinom(10000,1,0.5) - 1)
mean(2^rnbinom(10000,1,0.5) - 1)
mean(2^rnbinom(10000,1,0.5) - 1)
mean(2^rnbinom(10000,1,0.5) - 1)
mean(2^rnbinom(10000,1,0.5) - 1)
mean(2^rnbinom(10000,1,0.5) - 1)
mean(2^rnbinom(100000,1,0.5) - 1)
mean(2^rnbinom(100000,1,0.5) - 1)
mean(2^rnbinom(100000,1,0.5) - 1)
0.1*2500000 + 0.89*500000 + 0.01*0
0.1*5000000 + 0.89*1000000 + 0.01*0
nn=8
st=rep(1,nn)
st[1]=0
pos=1
sq=rep(c(1,2,4),100)
sq
source("~/.active-rstudio-document")
sq
rx
source("~/.active-rstudio-document")
mx[1;10]
mx[1:10]
plot(mx)
source("~/.active-rstudio-document")
plot(mx)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
#4: 1,2
#8: 1,4,2,4
#16:
# s_n=c(2s_{n-1},2s_{n-1},1)
sq=list()
sq[[1]]=1
sq[[2]]=c(1,2)
sq[[3]]=c(2,4,2,4,1)
for (i in 4:8) {
sq[[i]]=c(2*sq[[i-1]],2*s1[[i-1]],1)
}
#4: 1,2
#8: 1,4,2,4
#16:
# s_n=c(2s_{n-1},2s_{n-1},1)
sq=list()
sq[[1]]=1
sq[[2]]=c(1,2)
sq[[3]]=c(2,4,2,4,1)
for (i in 4:8) {
sq[[i]]=c(2*sq[[i-1]],2*sq[[i-1]],1)
}
sq
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
(10^(-4))/(10^(-4) + (2^(-10))*(10^4 - 1)/(10^4))
setwd("~/Research/CTEPH/PEA_risk/Git/PEA_risk/")
list.files()
do_assoc_test=TRUE # set to TRUE to do association tests
normalise=F
# force redo
force_redo_dm=FALSE
force_redo_5m=FALSE
force_redo_dq=FALSE
force_redo_all=FALSE
# missingness
if (!exists("low_missingness")) low_missingness=FALSE # Will be set in main pipeline
# Write to file or not
write_to_file=TRUE
# random seed
set.seed(1)
##**********************************************************************
## Set data and output directories                                  ####
##**********************************************************************
## Data location
datadir="../../Data/"
# Output location
outdir="Outputs/"
# Prefix all saved filenames with this according to missingness
if (low_missingness) prefix="nmiss_" else prefix=""
library(glmnet)
library(randomForest)
library(snpStats)
library(survival)
library(randomForestSRC) # Version 2.8.0
library(pec)
library(penalized)
library(cvAUC)
library(risksetROC)
library(lmtest)
source("Code/auxiliary.R") # Auxiliary functions
roc_DM=conc(YDM,euroscore)
load(paste0(datadir,"Temp_data/Workspaces/",prefix,"discovery.RData"))
roc_DM=conc(YDM,euroscore)
rdm=roc_DM$concordance
rdm
roc_DM
length(YDM)
help(conc)
conc
aucse
source("~/Research/CTEPH/PEA_risk/Git/PEA_risk/Code/auxiliary.R")
roc_DM=conc(YDM,euroscore)
rdm=roc_DM$concordance
rd
rdm
roc_DM$se
##**********************************************************************
##  Risk prediction in PEA                                          ####
##  Overall pipeline
##  James Liley
##  14/07/23
##**********************************************************************
##**********************************************************************
## 1. DISCOVERY ANALYSIS                                            ####
##**********************************************************************
## Implement necessary functions                                    ####
source("Code/auxiliary.R")
## Process raw data                                                 ####
source("Code/process_raw.R")
## Discovery analysis                                               ####
source("Code/discovery_analysis.R")
## Discovery analysis (low missingness)                             ####
low_missingness <<- TRUE
source("Code/discovery_analysis.R")
low_missingness <<- FALSE
# Output to Shiny
source("Code/outputs_for_shiny.R")
##**********************************************************************
## 2. PROSPECTIVE VALIDATION                                        ####
##**********************************************************************
## Process raw data                                                 ####
source("Code/process_raw_prospective.R")
## Discovery analysis                                               ####
source("Code/prospective_analysis.R")
shiny::runApp('~/Research/CTEPH/PEA_risk/Shiny')
