px
M1=t(matrix(as.numeric(intToBits(0:63)),32,64)[1:6,])
px=NA*M1 # Initialise probabilities
px=cbind(px,NA)
px[1,]=rep(1,7)
part=list(
list(c(1)),
list(c(2)),
list(c(3),c(1,2)),
list(c(4),c(1,3)),
list(c(5),c(1,4),c(2,3)),
list(c(6),c(1,5),c(2,4),c(1,2,3))
)
for (i in 2:dim(M1)[1]) {
st=M1[i,]
for (j in 1:dim(M1)[2]) {
pz=part[[j]]
p1=0
for (k in 1:length(pz)) {
if (prod(st[pz[[k]]]==1)) p1=max(p1,px[i-sum(2^pz[[k]]),7])
}
px[i,j]=p1
}
px[i,7]=mean(px[i,1:6])
}
px[1:10,]
M1[2,]
i=2
st=M1[i,]
j=1
pz=part[[j]]
p1=0
pz
k=1
st
prod(st[pz[[k]]]
)
(prod(st[pz[[k]]]==1))
M1=t(matrix(as.numeric(intToBits(0:63)),32,64)[1:6,])
px=NA*M1 # Initialise probabilities
px=cbind(px,NA)
px[1,]=rep(1,7)
part=list(
list(c(1)),
list(c(2)),
list(c(3),c(1,2)),
list(c(4),c(1,3)),
list(c(5),c(1,4),c(2,3)),
list(c(6),c(1,5),c(2,4),c(1,2,3))
)
for (i in 2:dim(M1)[1]) {
st=M1[i,]
for (j in 1:dim(M1)[2]) {
pz=part[[j]]
p1=0
for (k in 1:length(pz)) {
if (prod(st[pz[[k]]])==1) p1=max(p1,px[i-sum(2^pz[[k]]),7])
}
px[i,j]=p1
}
px[i,7]=mean(px[i,1:6])
}
px[1:3,]
i=2; j=1; k=1
st=M1[i,]
pz=part[[j]]
p1=0
(prod(st[pz[[k]]])==1)
i
pz[[k]]
2^i-sum(2^(pz[[k]]-1))
i-sum(2^(pz[[k]]-1))
px[i-sum(2^(pz[[k]]-1)),7]
M1=t(matrix(as.numeric(intToBits(0:63)),32,64)[1:6,])
px=NA*M1 # Initialise probabilities
px=cbind(px,NA)
px[1,]=rep(1,7)
part=list(
list(c(1)),
list(c(2)),
list(c(3),c(1,2)),
list(c(4),c(1,3)),
list(c(5),c(1,4),c(2,3)),
list(c(6),c(1,5),c(2,4),c(1,2,3))
)
for (i in 2:dim(M1)[1]) {
st=M1[i,]
for (j in 1:dim(M1)[2]) {
pz=part[[j]]
p1=0
for (k in 1:length(pz)) {
if (prod(st[pz[[k]]])==1) p1=max(p1,px[i-sum(2^(pz[[k]]-1)),7])
}
px[i,j]=p1
}
px[i,7]=mean(px[i,1:6])
}
px[1:4,]
px[1:10,]
M1[10,]
px
1/0.07458848
M1[8,]
source("~/.active-rstudio-document")
M1=t(matrix(as.numeric(intToBits(0:63)),32,64)[1:6,])
px=NA*M1 # Initialise probabilities
px=cbind(px,NA)
px[1,]=rep(1,7)
part=list(
list(c(1)),
list(c(2)),
list(c(3),c(1,2)),
list(c(4),c(1,3)),
list(c(5),c(1,4),c(2,3)),
list(c(6),c(1,5),c(2,4),c(1,2,3))
)
str=matrix("0",dim(M1))
for (i in 2:dim(M1)[1]) {
st=M1[i,]
for (j in 1:dim(M1)[2]) {
pz=part[[j]]
p1=0
stx=" "
for (k in 1:length(pz)) {
if (prod(st[pz[[k]]])==1) {
p2=px[i-sum(2^(pz[[k]]-1)),7]
if (p2 > p1) {
p1=p2
stx=paste0(pz[[k]],collapse=" ")
}
}
}
px[i,j]=p1
str[i,j]=stx
}
px[i,7]=mean(px[i,1:6])
}
M1=t(matrix(as.numeric(intToBits(0:63)),32,64)[1:6,])
px=NA*M1 # Initialise probabilities
px=cbind(px,NA)
px[1,]=rep(1,7)
part=list(
list(c(1)),
list(c(2)),
list(c(3),c(1,2)),
list(c(4),c(1,3)),
list(c(5),c(1,4),c(2,3)),
list(c(6),c(1,5),c(2,4),c(1,2,3))
)
str=matrix("0",dim(M1))
str
str=matrix("0",dim(M1)[1],dim(M1)[2])
str
M1=t(matrix(as.numeric(intToBits(0:63)),32,64)[1:6,])
px=NA*M1 # Initialise probabilities
px=cbind(px,NA)
px[1,]=rep(1,7)
part=list(
list(c(1)),
list(c(2)),
list(c(3),c(1,2)),
list(c(4),c(1,3)),
list(c(5),c(1,4),c(2,3)),
list(c(6),c(1,5),c(2,4),c(1,2,3))
)
str=matrix("0",dim(M1)[1],dim(M1)[2])
for (i in 2:dim(M1)[1]) {
st=M1[i,]
for (j in 1:dim(M1)[2]) {
pz=part[[j]]
p1=0
stx=" "
for (k in 1:length(pz)) {
if (prod(st[pz[[k]]])==1) {
p2=px[i-sum(2^(pz[[k]]-1)),7]
if (p2 > p1) {
p1=p2
stx=paste0(pz[[k]],collapse=" ")
}
}
}
px[i,j]=p1
str[i,j]=stx
}
px[i,7]=mean(px[i,1:6])
}
str
M1=t(matrix(as.numeric(intToBits(0:63)),32,64)[1:6,])
px=NA*M1 # Initialise probabilities
px=cbind(px,NA)
px[1,]=rep(1,7)
part=list(
list(c(1)),
list(c(2)),
list(c(3),c(1,2)),
list(c(4),c(1,3)),
list(c(5),c(1,4),c(2,3)),
list(c(6),c(1,5),c(2,4),c(1,2,3))
)
str=matrix("0",dim(M1)[1],dim(M1)[2])
for (i in 2:dim(M1)[1]) {
st=M1[i,]
for (j in 1:dim(M1)[2]) {
pz=part[[j]]
p1=0
stx=" "
for (k in 1:length(pz)) {
if (prod(st[pz[[k]]])==1) {
p2=px[i-sum(2^(pz[[k]]-1)),7]
if (p2 > p1) {
p1=p2
stx=paste0(pz[[k]],collapse=" ")
}
}
}
px[i,j]=p1
str[i,j]=stx
}
px[i,7]=mean(px[i,1:6])
}
print(px[63,7])
px
print(px[64,7])
getwd()
## Implement necessary functions                                    ####
source("Code/auxiliary.R")
## Process raw data                                                 ####
source("Code/process_raw.R")
load("../../Data/Temp_data/Workspaces/discovery.RData",v=T)
Y=Y5M
Yt=Y5M_time
w1=which(!is.na(Y+Yt))
Y=Y[w1]; Yt=Yt[w1]
# Split observations into k=10 equally sized folds
nfold=10
fold1=rep(1:nfold,1+floor(length(Y)/nfold))[1:length(Y)]; fold1=fold1[order(runif(length(fold1)))]
fold2=rep(1:nfold,1+floor(length(Y)/nfold))[1:length(Y)]; fold2=fold2[order(runif(length(fold2)))]
nse=30 # run this many iterations to estimate bootstrapped standard error
predset=c("noninv","preop","discharge","all")
y5m_name=paste0(datadir,"Models/",prefix,"y5m_outputs.RData")
# plot each outcome as time-dependent ROC curve
tx=1826 # one-year survival
plot(0,type="n",xlim=c(0,1),ylim=c(0,1),xlab="1-Specificity",ylab="Sensitivity",xaxs="i",yaxs="i")
draw_roc_surv(Ypred_noninv_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=2)
library(glmnet)
library(randomForest)
library(snpStats)
library(survival)
library(randomForestSRC) # Version 2.8.0
library(pec)
library(penalized)
library(cvAUC)
library(risksetROC)
library(lmtest)
source("Code/auxiliary.R") # Auxiliary functions
plot(0,type="n",xlim=c(0,1),ylim=c(0,1),xlab="1-Specificity",ylab="Sensitivity",xaxs="i",yaxs="i")
draw_roc_surv(Ypred_noninv_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=2)
draw_roc_surv(Ypred_preop_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=3)
draw_roc_surv(Ypred_discharge_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=4)
draw_roc_surv(Ypred_all_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=5)
abline(0,1)
legend("bottomright",c("Noninv.","Preop.","Discharge","All"),lty=1,col=2:5)
tx
tx=4*tx
plot(0,type="n",xlim=c(0,1),ylim=c(0,1),xlab="1-Specificity",ylab="Sensitivity",xaxs="i",yaxs="i")
draw_roc_surv(Ypred_noninv_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=2)
tx
tx=1826 # one-year survival
1826/4
1826/5
tx=365
plot(0,type="n",xlim=c(0,1),ylim=c(0,1),xlab="1-Specificity",ylab="Sensitivity",xaxs="i",yaxs="i")
draw_roc_surv(Ypred_noninv_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=2)
draw_roc_surv(Ypred_preop_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=3)
draw_roc_surv(Ypred_discharge_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=4)
draw_roc_surv(Ypred_all_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=5)
abline(0,1)
legend("bottomright",c("Noninv.","Preop.","Discharge","All"),lty=1,col=2:5)
tx=2*365.25
plot(0,type="n",xlim=c(0,1),ylim=c(0,1),xlab="1-Specificity",ylab="Sensitivity",xaxs="i",yaxs="i")
draw_roc_surv(Ypred_noninv_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=2)
draw_roc_surv(Ypred_preop_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=3)
draw_roc_surv(Ypred_discharge_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=4)
draw_roc_surv(Ypred_all_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=5)
abline(0,1)
legend("bottomright",c("Noninv.","Preop.","Discharge","All"),lty=1,col=2:5)
tx=3*365.25
plot(0,type="n",xlim=c(0,1),ylim=c(0,1),xlab="1-Specificity",ylab="Sensitivity",xaxs="i",yaxs="i")
draw_roc_surv(Ypred_noninv_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=2)
draw_roc_surv(Ypred_preop_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=3)
draw_roc_surv(Ypred_discharge_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=4)
draw_roc_surv(Ypred_all_5m_rfproc_surv,Y,Yt,fold2,tx,add=T,col=5)
abline(0,1)
legend("bottomright",c("Noninv.","Preop.","Discharge","All"),lty=1,col=2:5)
load(y5m_name)
ydif
sets=c("noninv","preop","discharge","all")
mods=c("lrproc_surv","lassoproc_surv","rfproc_surv")
for (i in 1:3) for (j in 1:4) {
pred=get(paste0("Ypred_",sets[j],"_5m_",mods[i]))
ym=mean(sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)])))
yse=sd(get(paste0("sepred_",sets[j],"_5m_",mods[i])))
ci=list(cvAUC=1-ym,ci=1-(ym - c(-1,1)*qnorm(0.05/2)*yse))
assign(paste0("cipred_",sets[j],"_5m_",mods[i]),ci)
}
warnings()
ym
tab_5m=c()
ccn=formatci(cipred_noninv_5m_lrproc_surv)
ccp=formatci(cipred_preop_5m_lrproc_surv)
ccd=formatci(cipred_discharge_5m_lrproc_surv)
cca=formatci(cipred_all_5m_lrproc_surv)
tab_5m=cbind(tab_5m,c(ccn,ccp,ccd,cca))
ccn=formatci(cipred_noninv_5m_lassoproc_surv)
ccp=formatci(cipred_preop_5m_lassoproc_surv)
ccd=formatci(cipred_discharge_5m_lassoproc_surv)
cca=formatci(cipred_all_5m_lassoproc_surv)
tab_5m=cbind(tab_5m,c(ccn,ccp,ccd,cca))
ccn=formatci(cipred_noninv_5m_rfproc_surv)
ccp=formatci(cipred_preop_5m_rfproc_surv)
ccd=formatci(cipred_discharge_5m_rfproc_surv)
cca=formatci(cipred_all_5m_rfproc_surv)
tab_5m=cbind(tab_5m,c(ccn,ccp,ccd,cca))
rownames(tab_5m)=c("NONINV","PREOP","DISCHARGE","ALL")
colnames(tab_5m)=c("Linear","Lasso","RF")
tab_5m
sets=c("noninv","preop","discharge","all")
mods=c("lrproc_surv","lassoproc_surv","rfproc_surv")
for (i in 1:3) for (j in 1:4) {
pred=get(paste0("Ypred_",sets[j],"_5m_",mods[i]))
ym=mean(sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)])))
yse=sd(get(paste0("sepred_",sets[j],"_5m_",mods[i])))
ci=list(cvAUC=1-ym,ci=1-(ym - c(-1,1)*qnorm(0.05/2)*yse))
assign(paste0("cipred_",sets[j],"_5m_",mods[i]),ci)
}
tab_5m=c()
ccn=formatci(cipred_noninv_5m_lrproc_surv)
ccp=formatci(cipred_preop_5m_lrproc_surv)
ccd=formatci(cipred_discharge_5m_lrproc_surv)
cca=formatci(cipred_all_5m_lrproc_surv)
tab_5m=cbind(tab_5m,c(ccn,ccp,ccd,cca))
ccn=formatci(cipred_noninv_5m_lassoproc_surv)
ccp=formatci(cipred_preop_5m_lassoproc_surv)
ccd=formatci(cipred_discharge_5m_lassoproc_surv)
cca=formatci(cipred_all_5m_lassoproc_surv)
tab_5m=cbind(tab_5m,c(ccn,ccp,ccd,cca))
ccn=formatci(cipred_noninv_5m_rfproc_surv)
ccp=formatci(cipred_preop_5m_rfproc_surv)
ccd=formatci(cipred_discharge_5m_rfproc_surv)
cca=formatci(cipred_all_5m_rfproc_surv)
tab_5m=cbind(tab_5m,c(ccn,ccp,ccd,cca))
rownames(tab_5m)=c("NONINV","PREOP","DISCHARGE","ALL")
colnames(tab_5m)=c("Linear","Lasso","RF")
tab_5m
source("~/.active-rstudio-document")
ydi
ydif
source("~/.active-rstudio-document")
warnings()
help(concordancefit)
help(concordance)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(remotes)
install.packages("remotes")
library(remotes)
install_version("survival", version = "2.40.1", repos = "http://cran.us.r-project.org")
help(install_version)
install_version("survival", version = "2.40.1", repos = "http://cran.us.r-project.org",build=TRUE)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
j=3
i=3
max(fold2)
sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)]))
1-sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)]))
ydif(pred,Y,Yt)
1-ydif(pred,Y,Yt)
names(Ypred_all_5m_rfproc_surv)
class(Ypred_all_5m_rfproc_surv)
class(best_all_5m)
best_all_5m
load("~/Desktop/Risk/data/outputs_5m.RData",v=T)
tab_5m
load("~/Desktop/Risk/data/y5m_outputs",v=T)
load("~/Desktop/Risk/data/old/outputs_5m.RData",v=T)
tab_5m
load("~/Desktop/Risk/data/old/outputs_pm.RData",v=T)
tab_pm
load("~/Desktop/Risk/data/old/all_outputs_17_6.RData",v=T)
load("~/Desktop/Risk/data/old/all_outputs_17_6.RData",v=T)
sets=c("noninv","preop","discharge","all")
mods=c("lrproc_surv","lassoproc_surv","rfproc_surv")
for (i in 1:3) for (j in 1:4) {
pred=get(paste0("Ypred_",sets[j],"_5m_",mods[i]))
ym=mean(sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)])))
yse=sd(get(paste0("sepred_",sets[j],"_5m_",mods[i])))
ci=list(cvAUC=1-ym,ci=1-(ym - c(-1,1)*qnorm(0.05/2)*yse))
assign(paste0("cipred_",sets[j],"_5m_",mods[i]),ci)
}
sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)]))
ydif
# Partial likeilhood-based measure of discretion
ydif=function(pred,Y,Yt) { # Harrell's concordance
1-survConcordance(Surv(Yt,Y)~pred)$concordance
}
sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)]))
sessionInfo()
ls()
load("~/Desktop/Risk/data/old/all_outputs_17_6.RData",v=T)
Y=Y5M
Yt=Y5M_time
w1=which(!is.na(Y+Yt))
Y=Y[w1]; Yt=Yt[w1]
# Split observations into k=10 equally sized folds
nfold=10
fold1=rep(1:nfold,1+floor(length(Y)/nfold))[1:length(Y)]; fold1=fold1[order(runif(length(fold1)))]
fold2=rep(1:nfold,1+floor(length(Y)/nfold))[1:length(Y)]; fold2=fold2[order(runif(length(fold2)))]
nse=30 # run this many iterations to estimate bootstrapped standard error
predset=c("noninv","preop","discharge","all")
load("~/Desktop/Risk/data/old/old_10_7/y5m_outputs",v=T)
#load("~/Desktop/Risk/data/old/all_outputs_17_6.RData",v=T)
load("~/Desktop/Risk/data/old/old_10_7/y5m_outputs",v=T)
sets=c("noninv","preop","discharge","all")
mods=c("lrproc_surv","lassoproc_surv","rfproc_surv")
for (i in 1:3) for (j in 1:4) {
pred=get(paste0("Ypred_",sets[j],"_5m_",mods[i]))
ym=mean(sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)])))
yse=sd(get(paste0("sepred_",sets[j],"_5m_",mods[i])))
ci=list(cvAUC=1-ym,ci=1-(ym - c(-1,1)*qnorm(0.05/2)*yse))
assign(paste0("cipred_",sets[j],"_5m_",mods[i]),ci)
}
load("~/Desktop/Risk/data/old/all_outputs_17_6.RData",v=T)
Y=Y5M
Yt=Y5M_time
w1=which(!is.na(Y+Yt))
Y=Y[w1]; Yt=Yt[w1]
# Split observations into k=10 equally sized folds
nfold=10
fold1=rep(1:nfold,1+floor(length(Y)/nfold))[1:length(Y)]; fold1=fold1[order(runif(length(fold1)))]
fold2=rep(1:nfold,1+floor(length(Y)/nfold))[1:length(Y)]; fold2=fold2[order(runif(length(fold2)))]
nse=30 # run this many iterations to estimate bootstrapped standard error
predset=c("noninv","preop","discharge","all")
load("~/Desktop/Risk/data/old/old_10_7/y5m_outputs",v=T)
sets=c("noninv","preop","discharge","all")
mods=c("lrproc_surv","lassoproc_surv","rfproc_surv")
for (i in 1:3) for (j in 1:4) {
pred=get(paste0("Ypred_",sets[j],"_5m_",mods[i]))
ym=mean(sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)])))
yse=sd(get(paste0("sepred_",sets[j],"_5m_",mods[i])))
ci=list(cvAUC=1-ym,ci=1-(ym - c(-1,1)*qnorm(0.05/2)*yse))
assign(paste0("cipred_",sets[j],"_5m_",mods[i]),ci)
}
tab_5m=c()
ccn=formatci(cipred_noninv_5m_lrproc_surv)
ccp=formatci(cipred_preop_5m_lrproc_surv)
ccd=formatci(cipred_discharge_5m_lrproc_surv)
cca=formatci(cipred_all_5m_lrproc_surv)
tab_5m=cbind(tab_5m,c(ccn,ccp,ccd,cca))
ccn=formatci(cipred_noninv_5m_lassoproc_surv)
ccp=formatci(cipred_preop_5m_lassoproc_surv)
ccd=formatci(cipred_discharge_5m_lassoproc_surv)
cca=formatci(cipred_all_5m_lassoproc_surv)
tab_5m=cbind(tab_5m,c(ccn,ccp,ccd,cca))
ccn=formatci(cipred_noninv_5m_rfproc_surv)
ccp=formatci(cipred_preop_5m_rfproc_surv)
ccd=formatci(cipred_discharge_5m_rfproc_surv)
cca=formatci(cipred_all_5m_rfproc_surv)
tab_5m=cbind(tab_5m,c(ccn,ccp,ccd,cca))
rownames(tab_5m)=c("NONINV","PREOP","DISCHARGE","ALL")
colnames(tab_5m)=c("Linear","Lasso","RF")
print(tab_5m)
i=3
i=4; j=3
pred=get(paste0("Ypred_",sets[j],"_5m_",mods[i]))
i
i=3; j=4
pred=get(paste0("Ypred_",sets[j],"_5m_",mods[i]))
ym=mean(sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)])))
ym
sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)]))
table(fold2)
length(ydif)
length(Y)
length(pred)
Y_19=Y; pred_19=pred; Yt_19=Yt
save(Y_19,pred_19,Yt_19,fold2,file="~/Desktop/xtemp.RData")
source("~/.active-rstudio-document")
length(Y)
length(Y_19)
load("~/Desktop/xtemp.RData",v=T)
length(Y_19)
length(which(Y_19!=Y))
table(Y_19,Y)
table(Y_19)
table(Y)
table(Yt_19)
mean(sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)])))
1-mean(sapply(1:max(fold2),function(x) ydif(pred[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)])))
1-mean(sapply(1:max(fold2),function(x) ydif(pred_19[which(fold2==x)],Y_19[which(fold2==x)],Yt_19[which(fold2==x)])))
1-mean(sapply(1:max(fold2),function(x) ydif(pred_19[which(fold2==x)],Y[which(fold2==x)],Yt[which(fold2==x)])))
load("~/Desktop/Risk/data/outputs_5m.RData",v=T)
tab_5m
load("~/Desktop/Risk/data/old/outputs_5m.RData",v=T)
tab_5m
dim(tab)
table(Y_19)
table(tab$surv_days_max5yrs_census)
table(tab$fu_mortality_census)
111 + 78
