##**********************************************************************
##  Risk prediction in PEA                                          ####
##  Overall pipeline
##  James Liley
##  14/07/23
##**********************************************************************
##**********************************************************************
## 1. DISCOVERY ANALYSIS                                            ####
##**********************************************************************
## Implement necessary functions                                    ####
source("Code/auxiliary.R")
## Process raw data                                                 ####
source("Code/process_raw.R")
## Discovery analysis                                               ####
source("Code/discovery_analysis.R")
sink()
sink()
sink()
roc_DM=conc(YDM,euroscore)
rdm=roc_DM$concordance
rdmci=rdm + c(1,-1)*qnorm(0.05/2)*roc_DM$se
cat(paste0("AUROC for EUROSCORE on outcome 90DM: ",
signif(rdm,digits=3)," (",signif(rdmci[1],digits=3),
",",signif(rdmci[2],digits=3),")\n\n\n"))
roc_5M=concordance(Surv(Yt,Y)~ex)$concordance
r5m=roc_5M$concordance
roc_5M=concordance(Surv(Yt,Y)~ex)
r5m=roc_5M$concordance
r5mci=r5m + c(1,-1)*qnorm(0.05/2)*roc_5M$se
cat(paste0("AUROC for EUROSCORE on outcome 5YM: ",
signif(r5m,digits=3)," (",signif(r5mci[1],digits=3),
",",signif(r5mci[2],digits=3),")\n\n\n"))
names(roc_5M)
roc_5M=1-concordance(Surv(Yt,Y)~ex)
roc_5M=concordance(Surv(Yt,Y)~ex)
r5m=1-roc_5M$concordance
r5mci=r5m + c(1,-1)*qnorm(0.05/2)*sqrt(roc_5M$var)
cat(paste0("AUROC for EUROSCORE on outcome 5YM: ",
signif(r5m,digits=3)," (",signif(r5mci[1],digits=3),
",",signif(r5mci[2],digits=3),")\n\n\n"))
roc_DC=conc(YDC>0,euroscore)
rcm=roc_DC$concordance
rcmci=rcm + c(1,-1)*qnorm(0.05/2)*roc_DC$se
cat(paste0("AUROC for EUROSCORE on outcome DC: ",
signif(rcm,digits=3)," (",signif(rcmci[1],digits=3),
",",signif(rdmci[2],digits=3),")\n\n\n"))
roc_DC=conc(YDC>0,euroscore)
rcm=roc_DC$concordance
rcmci=rcm + c(1,-1)*qnorm(0.05/2)*roc_DC$se
cat(paste0("AUROC for EUROSCORE on outcome DC: ",
signif(rcm,digits=3)," (",signif(rcmci[1],digits=3),
",",signif(rcmci[2],digits=3),")\n\n\n"))
roc_DC$se
source("~/Research/CTEPH/PEA_risk/Git/PEA_risk/Code/discovery_analysis.R")
##**********************************************************************
##  Risk prediction in PEA                                          ####
##  Overall pipeline
##  James Liley
##  14/07/23
##**********************************************************************
##**********************************************************************
## 1. DISCOVERY ANALYSIS                                            ####
##**********************************************************************
## Implement necessary functions                                    ####
source("Code/auxiliary.R")
## Process raw data                                                 ####
source("Code/process_raw.R")
## Discovery analysis                                               ####
source("Code/discovery_analysis.R")
## Discovery analysis (low missingness)                             ####
low_missingness <<- TRUE
source("Code/discovery_analysis.R")
low_missingness <<- FALSE
# Output to Shiny
source("Code/outputs_for_shiny.R")
##**********************************************************************
## 2. PROSPECTIVE VALIDATION                                        ####
##**********************************************************************
## Process raw data                                                 ####
source("Code/process_raw_prospective.R")
## Discovery analysis                                               ####
source("Code/prospective_analysis.R")
source("~/Desktop/om_ob.R")
exp(pi*sqrt(163))
(0.7985 - 0.798)/(5e-4)
source("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.txt")
source("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
grep("*****",fr)
grep("\*\*\*\*\*",fr)
grep("*****",fr,fixed=TRUE)
fr[14]
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[ix:length(fr)],collapse="")
source(frx)
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[ix:length(fr)],collapse=";")
source(frx)
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[(ix+1):length(fr)],collapse=";\r")
source(frx)
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[(ix+1):length(fr)],collapse=";\r")
frx
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[(ix+1):length(fr)],collapse=";^r")
frx
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[(ix+1):length(fr)],collapse=";")
frx
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=fr[(ix+1):length(fr)]
frx
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[(ix+1):length(fr)],collapse="\n")
eval(parse(text=frx))
frx
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[(ix+1):length(fr)],collapse="\n")
eval(parse(text=frx))
class(xroc)
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[(ix+1):length(fr)],collapse="\n")
eval(parse(text=frx))
xgbroc=xroc
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[(ix+1):length(fr)],collapse="\n")
eval(parse(text=frx))
xgbroc=xroc
ff2=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/v4_final/roc_super.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[(ix+1):length(fr)],collapse="\n")
eval(parse(text=frx))
sroc=xroc
length(sroc)
plot(sroc)
sroc$auc
xgbroc$auc
frx
ff=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/constituent_predictors/roc_pred.xgb3.xgb.txt")
fr=readLines(ff)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[(ix+1):length(fr)],collapse="\n")
eval(parse(text=frx))
xgbroc=xroc
ff2=("~/Research/SPARRA/git/SPARRAv4/Analysis/full_model/Performance/v4_final/roc_super.txt")
fr=readLines(ff2)
ix=grep("*****",fr,fixed=TRUE)
frx=paste(fr[(ix+1):length(fr)],collapse="\n")
eval(parse(text=frx))
sroc=xroc
sroc$auc
xgbroc$auc
names(xgbroc)
floor(12866084/3)
0.7989354*4288694
0.7989354*4288695
options(digits=12)
0.7989354*4288695
0.7989354*4288694
0.7989354*4288694
sroc$auc
xgbroc$auc
nn=floor(12866084/3)
prop.test(c(sroc$auc[1],xgbroc$auc[1])*nn,c(nn,nn))
prop.test(c(sroc$auc[2],xgbroc$auc[2])*nn,c(nn,nn))
prop.test(c(sroc$auc[3],xgbroc$auc[3])*nn,c(nn,nn))
prop.test(c(sum(sroc$auc[1:3]),sum(xgbroc$auc[1:3]))*3*nn,3*c(nn,nn))
prop.test(c(sum(sroc$auc[1:3]),sum(xgbroc$auc[1:3]))*nn,3*c(nn,nn))
n1=50; n0=100
cx=rep(0,1000)
for (ii in 1:length(cx)) {
r1=rnorm(n1); r0=rnorm(n0)
cc=0; for (i in 1:n1) cc=cc+length(which(r1[i]>r0))
cx[ii]=cc
}
mean(cc)
mean(cc)/(50*100)
n1=50; n0=100
cx=rep(0,10000)
for (ii in 1:length(cx)) {
r1=rnorm(n1); r0=rnorm(n0)
cc=0; for (i in 1:n1) cc=cc+length(which(r1[i]>r0))
cx[ii]=cc
}
mean(cc)
mean(cc)/(50*100)
n1=50; n0=100
cx=rep(0,10000)
for (ii in 1:length(cx)) {
r1=rnorm(n1); r0=rnorm(n0)
cc=0; for (i in 1:n1) cc=cc+sum(r1[i]>r0)
cx[ii]=cc
}
mean(cc)/(50*100)
n1=50; n0=100
cx=rep(0,10000)
for (ii in 1:length(cx)) {
r1=rnorm(n1); r0=rnorm(n0)
cc=0; for (i in 1:n1) cc=cc+sum(r1[i]>r0)
cx[ii]=cc
}
mean(cc)/(50*100)
n1=50; n0=100
cx=rep(0,100000)
for (ii in 1:length(cx)) {
r1=rnorm(n1); r0=rnorm(n0)
cc=0; for (i in 1:n1) cc=cc+sum(r1[i]>r0)
cx[ii]=cc
}
mean(cx)
mean(cx)/(50*100)
sd(cx/(50*100))
sqrt(0.5*(1-0.5)/(50*100))
sd(rbinom(100,50*100,prob=0.5))
sd(rbinom(100,50*100,prob=0.5)/(50*100))
sd(rbinom(10000,50*100,prob=0.5)/(50*100))
sd(cx/(50*100))
sqrt(0.5*(1-0.5)/150)
sqrt(0.5*(1-0.5)/150)
names(xroc)
d1=data.frame(x=sample(1:4,100,rep=T),y=sample(1:5,100,rep=T),z=rnorm(100))
lm(z~x + y,data=d1)
lm(z~x*y,data=d1)
lm(z~x+y+ x*y,data=d1)
polr
n=1000 # number of samples
dat=data.frame(
srh=sample(1:5,n,rep=T),
simd=sample(1:10,n,rep=T),
nssec=as.factor(sample(1:5,n,rep=T)),
sex=sample(c("M","F"),n,rep=T),
afib=rnorm(n)
)
# To test for a sex x SIMD interaction
mod0=polr(srh~nssec + afib + simd + sex) # model with no interaction term
n=1000 # number of samples
dat=data.frame(
srh=sample(1:5,n,rep=T),
simd=sample(1:10,n,rep=T),
nssec=as.factor(sample(1:5,n,rep=T)),
sex=sample(c("M","F"),n,rep=T),
afib=rnorm(n)
)
# To test for a sex x SIMD interaction
mod0=polr(srh~nssec + afib + simd + sex,data=dat) # model with no interaction term
n=1000 # number of samples
dat=data.frame(
srh=as.factor(sample(1:5,n,rep=T)),
simd=sample(1:10,n,rep=T), # not a factor
nssec=as.factor(sample(1:5,n,rep=T)), # a factor
sex=sample(c("M","F"),n,rep=T),
afib=rnorm(n)
)
# To test for a sex x SIMD interaction
mod0=polr(srh~nssec + afib + simd + sex,data=dat) # model with no interaction term
mod1=polr(srh~nssec + afib + simd + sex + simd*sex,data=dat) # model with interaction term. Same as (srh~nssec + afib + simd*sex) but included to be clear.
mod0
mod1$deviance-mod0$deviance
2*(mod1$deviance-mod0$deviance)
lrtest
source("~/.active-rstudio-document")
n=1000 # number of samples
dat=data.frame(
srh=as.factor(sample(1:5,n,rep=T)),
simd=sample(1:10,n,rep=T), # not a factor
nssec=as.factor(sample(1:5,n,rep=T)), # a factor
sex=sample(c("M","F"),n,rep=T),
afib=rnorm(n)
)
# To test for a sex x SIMD interaction
mod0=polr(srh~nssec + afib + simd + sex,data=dat) # model with no interaction term
mod1=polr(srh~nssec + afib + simd + sex + simd*sex,data=dat) # model with interaction term. Same as (srh~nssec + afib + simd*sex) but included to be clear.
lrtest(mod1,mod0)
n=1000 # number of samples
dat=data.frame(
srh=as.factor(sample(1:5,n,rep=T)),
simd=sample(1:10,n,rep=T), # not a factor
nssec=as.factor(sample(1:5,n,rep=T)), # a factor
sex=sample(c("M","F"),n,rep=T),
afib=rnorm(n)
)
# To test for a sex x SIMD interaction
mod0=polr(srh~nssec + afib + simd + sex,data=dat) # model with no interaction term
mod1=polr(srh~nssec + afib + simd*sex,data=dat) # model with interaction term. Same as (srh~nssec + afib + simd*sex) but included to be clear.
lrtest(mod1,mod0)
n=1000 # number of samples
dat=data.frame(
srh=as.factor(sample(1:5,n,rep=T)),
simd=sample(1:10,n,rep=T), # not a factor
nssec=as.factor(sample(1:5,n,rep=T)), # a factor
sex=sample(c("M","F"),n,rep=T),
afib=rnorm(n)
)
# To test for a sex x SIMD interaction
mod0=polr(srh~nssec + afib + simd + sex,data=dat) # model with no interaction term
mod1=polr(srh~nssec + afib + simd + sex + simd*sex,data=dat) # model with interaction term. Same as (srh~nssec + afib + simd*sex) but included to be clear.
lrtest(mod1,mod0)
dat=matrix(0,4,7)
srank=sample(1:4)
dat[,1]=srank
lrank=sample(1:4)
lrank2=c(rank(lrank[1:2]),5,5)
lrank3=c(rank(lrank[1:3]),5)
dat[,2]=lrank2
dat[,3]=lrank3
dat[,4]=lrank4
dat=matrix(0,4,7)
srank=sample(1:4)
dat[,1]=srank
lrank=sample(1:4)
lrank2=c(rank(lrank[1:2]),5,5)
lrank3=c(rank(lrank[1:3]),5)
dat[,2]=lrank2
dat[,3]=lrank3
dat[,4]=lrank
trank2=rank(srank/2 + lrank2)
trank3=rank(srank/2 + lrank3)
trank=rank(srank/2 + lrank)
dat[,5]=trank2
dat[,6]=trank3
dat[,7]=trank
w=which.min(trank)
w2=trank2[w]
w3=trank3[w]
trank=srank/2 + lrank
dat
w
w2
w3
xt=c()
ntrial=10000
for (i in 1:length(ntrial)) {
set.seed(i)
dat=matrix(0,4,7)
srank=sample(1:4)
dat[,1]=srank
lrank=sample(1:4)
lrank2=c(rank(lrank[1:2]),5,5)
lrank3=c(rank(lrank[1:3]),5)
dat[,2]=lrank2
dat[,3]=lrank3
dat[,4]=lrank
trank2=rank(srank/2 + lrank2)
trank3=rank(srank/2 + lrank3)
trank=rank(srank/2 + lrank)
dat[,5]=trank2
dat[,6]=trank3
dat[,7]=trank
w=which.min(trank)
w2=trank2[w]
w3=trank3[w]
trank=srank/2 + lrank
if ((w!=w2) | (w!=w3)) xt=c(xt,i)
}
length(xt)
source("~/.active-rstudio-document")
length(xt)
length(ntrial)
length(xt)/ntrial
xx=seq(-2,2,length=1000)
ff=function(xx) exp(-1/(xx^2 - 1))*(abs(xx)<1)
plot(xx,ff(xx))
xx=seq(-2,2,length=1000)
ff=function(xx) exp(-1/(xx^2 - 1))*(abs(xx)<=1)
plot(xx,ff(xx))
xx=seq(-2,2,length=1000)
ff=function(xx) exp(1/(xx^2 - 1))*(abs(xx)<=1)
plot(xx,ff(xx))
plot(xx,ff(xx),type="l")
xx=seq(-1.1,-0.9,length=1000)
ff=function(xx) exp(1/(xx^2 - 1))*(abs(xx)<=1)
plot(xx,ff(xx),type="l")
install.packages("brant")
library(brant)
brant(mod1)
n=1000 # number of samples
dat=data.frame(
srh=as.factor(sample(1:5,n,rep=T)),
simd=sample(1:10,n,rep=T), # not a factor
nssec=as.factor(sample(1:5,n,rep=T)), # a factor
sex=sample(c("M","F"),n,rep=T),
afib=rnorm(n)
)
# To test for a sex x SIMD interaction
mod0=polr(srh~nssec + afib + simd + sex,data=dat) # model with no interaction term
mod1=polr(srh~nssec + afib + simd + sex + simd*sex,data=dat) # model with interaction term. Same as (srh~nssec + afib + simd*sex) but included to be clear.
lrtest(mod1,mod0)
brant(mod1)
help(model.matrix)
m1=model.matric(mod0)
m1=model.matrix(mod0)
dim(m1)
head(m1)
n=1000 # number of samples
dat=data.frame(
srh=as.factor(sample(1:5,n,rep=T)),
simd=sample(1:10,n,rep=T), # not a factor
nssec=as.factor(sample(1:5,n,rep=T)), # a factor
sex=sample(c("M","F"),n,rep=T),
afib=rnorm(n)
)
# To test for a sex x SIMD interaction
mod0=polr(srh~nssec + afib + simd + sex,data=dat) # model with no interaction term
brant(mod0)
n=10000 # number of samples
dat=data.frame(
srh=as.factor(sample(1:5,n,rep=T)),
simd=sample(1:10,n,rep=T), # not a factor
nssec=as.factor(sample(1:5,n,rep=T)), # a factor
sex=sample(c("M","F"),n,rep=T),
afib=rnorm(n)
)
# To test for a sex x SIMD interaction
mod0=polr(srh~nssec + afib + simd + sex,data=dat) # model with no interaction term
brant(mod0)
n=10000 # number of samples
dat=data.frame(
srh=as.factor(sample(1:10,n,rep=T)),
simd=sample(1:10,n,rep=T), # not a factor
nssec=as.factor(sample(1:5,n,rep=T)), # a factor
sex=sample(c("M","F"),n,rep=T),
afib=rnorm(n)
)
# To test for a sex x SIMD interaction
mod0=polr(srh~nssec + afib + simd + sex,data=dat) # model with no interaction term
brant(mod0)
c1=read.csv("~/Desktop/bank_data.csv")
dim(c1)
head(c1)
cumsum(c1$Amount)
sum(c1$amount)
sum(c1$Amount)
sum(c1$Amount,na.rm=T)
c1=read.csv("~/Desktop/bank_data.csv")
tot=5827
c1$bal=cumsum(c1$Amount)-sum(c1$Amount,na.rm=T) + tot
plot(c1$bal)
plot(c1$bal,type="l")
abline(h=820)
abline(v=820)
abline(v=850)
c1[830:850,]
dim(C1)
dim(c1)
c1$date[1000]
c1$Date[1000]
min(c1$date)
min(c1$Date)
c1$Date[1]
c1$Date[1:10]
help(as.Date)
c1=read.csv("~/Desktop/bank_data.csv")
tot=5827
c1$date=as.Date(c1$Date,format="%d/%m/%Y")
c1$date[1:10]
min(c1$date)
min(c1$date,na.rm=T)
c1=read.csv("~/Desktop/bank_data.csv")
tot=5827
c1=c1[which(is.finite(c1$Amount))]
c1=read.csv("~/Desktop/bank_data.csv")
tot=5827
c1=c1[which(is.finite(c1$Amount)),]
c1$date=as.Date(c1$Date,format="%d/%m/%Y")
c1$bal=cumsum(c1$Amount)-sum(c1$Amount,na.rm=T) + tot
dim(c1)
min(c1$date)
c1=read.csv("~/Desktop/bank_data.csv")
tot=5827
c1=c1[which(is.finite(c1$Amount)),]
c1$date=as.Date(c1$Date,format="%d/%m/%Y")
c1=c1[order(c1$date),]
dim(c1)
head(c1)
c1$bal=cumsum(c1$Amount)-sum(c1$Amount,na.rm=T) + tot
plot(c1$bal,type="l")
which.min(c1$bal)
c1[613,]
c1[grep("ewcast",c1$Subcategory),]
head(c1)
c1[grep("ewcast",c1$Memo),]
c1[grep("uild",c1$Memo),]
c1$Memo[1:50]
c1[grep("EWCAST",c1$Memo),]
c1[grep("EWCAST",c1$Memo),]
c1[grep("EWCAST",c1$Memo),]
c1[grep("EWCASTLE BUILD",c1$Memo),]
